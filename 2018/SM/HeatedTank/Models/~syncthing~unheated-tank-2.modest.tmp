// Version 2:
// modes.exe unheated-tank-2.modest --relative-width --width 0.01 -E "TIME_BOUND=100, C_FAIL=0" -E "TIME_BOUND=200, C_FAIL=0" -E "TIME_BOUND=300, C_FAIL=0" -E "TIME_BOUND=400, C_FAIL=0" -E "TIME_BOUND=500, C_FAIL=0" -E "TIME_BOUND=600, C_FAIL=0" -E "TIME_BOUND=700, C_FAIL=0" -E "TIME_BOUND=800, C_FAIL=0" -E "TIME_BOUND=900, C_FAIL=0" -E "TIME_BOUND=1000, C_FAIL=0" -O unheated-tank-2.results.txt -Y
//
// Version 2':
// modes.exe unheated-tank-2.modest --relative-width --width 0.01 -E "TIME_BOUND=100, C_FAIL=0.1" -E "TIME_BOUND=200, C_FAIL=0.1" -E "TIME_BOUND=300, C_FAIL=0.1" -E "TIME_BOUND=400, C_FAIL=0.1" -E "TIME_BOUND=500, C_FAIL=0.1" -E "TIME_BOUND=600, C_FAIL=0.1" -E "TIME_BOUND=700, C_FAIL=0.1" -E "TIME_BOUND=800, C_FAIL=0.1" -E "TIME_BOUND=900, C_FAIL=0.1" -E "TIME_BOUND=1000, C_FAIL=0.1" -O unheated-tank-2-alt.results.txt -Y

const real TIME_BOUND;
const real C_FAIL; // probability for controller action to fail

const real HLP = 3; // overflow level
const real HLB = 1; // upper activation level
const real HLA = -1; // lower activation level
const real HLV = -3; // dry-out level

const real P1_FAIL_ON_ON = 0.5 / 219; // failure rate of pump P1: on to stuck-on
const real P1_FAIL_ON_OFF = 0.5 / 219; // failure rate of pump P1: on to stuck-off
const real P1_FAIL_OFF_ON = 1 / 21.9; // failure rate of pump P1: off to stuck-on
const real P1_FAIL_OFF_OFF = 1 / 2.19; // failure rate of pump P1: off to stuck-off
const real P2_FAIL_ON_ON = 1 / 17.5; // failure rate of pump P2: on to stuck-on
const real P2_FAIL_ON_OFF = 1 / 1.75; // failure rate of pump P2: on to stuck-off
const real P2_FAIL_OFF_ON = 0.5 / 175; // failure rate of pump P2: off to stuck-on
const real P2_FAIL_OFF_OFF = 0.5 / 175; // failure rate of pump P2: off to stuck-off
const real V_FAIL_ON_ON = 0.5 / 320; // failure rate of valve V: on to stuck-on
const real V_FAIL_ON_OFF = 0.5 / 320; // failure rate of valve V: on to stuck-off
const real V_FAIL_OFF_ON = 1 / 32.0; // failure rate of valve V: off to stuck-on
const real V_FAIL_OFF_OFF = 1 / 3.20; // failure rate of valve V: off to stuck-off

action init;
broadcast action switch;

bool on_p1 = true, on_p2 = false, on_v = true; // initial configuration: P1 on, P2 off, V on
int(0..2) fail_p1, fail_p2, fail_v; // 0: not failed, 1: stuck on, 2: stuck off

var level = 0; // liquid level in tank
der(level) = (on_p1 && fail_p1 == 0 || fail_p1 == 1 ? 0.6 : 0) + (on_p2 && fail_p2 == 0 || fail_p2 == 1 ? 0.6 : 0) + (on_v && fail_v == 0 || fail_v == 1 ? -0.6 : 0);

bool overflow, dryout;

property PFail = Pmax(<>[T<=TIME_BOUND] (overflow || dryout));
//property IFail = (fail_p1 == 0 ? 0 : 1) + (fail_p2 == 0 ? 0 : 1) + (fail_v == 0 ? 0 : 1); // importance function for failure

property PDryOut = Pmax(<>[T<=TIME_BOUND] dryout);
//property IDryOut = (fail_p1 == 2 ? 1 : 0) + (fail_p2 == 2 ? 1 : 0) + (fail_v == 1 ? 1 : 0); // importance function for dryout

property POverflow = Pmax(<>[T<=TIME_BOUND] overflow);
//property IOverflow = (fail_p1 == 1 ? 1 : 0) + (fail_p2 == 1 ? 1 : 0) + (fail_v == 2 ? 1 : 0); // importance function for overflow

process Pump1()
{
   clock c_on; real x_on;
   clock c_off; real x_off;

   invariant(false) init {= x_on = Exp(on_p1 ? P1_FAIL_ON_ON : P1_FAIL_OFF_ON), x_off = Exp(on_p1 ? P1_FAIL_ON_OFF : P1_FAIL_OFF_OFF) =};
   do {
   :: switch? {= c_on = 0, x_on = Exp(on_p1 ? P1_FAIL_ON_ON : P1_FAIL_OFF_ON), c_off = 0, x_off = Exp(on_p1 ? P1_FAIL_ON_OFF : P1_FAIL_OFF_OFF) =}
   :: when(c_on >= x_on) invariant(c_on <= x_on) break {= fail_p1 = 1 =} // failure: stuck on
   :: when(c_off >= x_off) invariant(c_off <= x_off) break {= fail_p1 = 2 =} // failure: stuck off
   }
}

process Pump2()
{
   clock c_on; real x_on;
   clock c_off; real x_off;

   invariant(false) init {= x_on = Exp(on_p2 ? P2_FAIL_ON_ON : P2_FAIL_OFF_ON), x_off = Exp(on_p2 ? P2_FAIL_ON_OFF : P2_FAIL_OFF_OFF) =};
   do {
   :: switch? {= c_on = 0, x_on = Exp(on_p2 ? P2_FAIL_ON_ON : P2_FAIL_OFF_ON), c_off = 0, x_off = Exp(on_p2 ? P2_FAIL_ON_OFF : P2_FAIL_OFF_OFF) =}
   :: when(c_on >= x_on) invariant(c_on <= x_on) break {= fail_p2 = 1 =} // failure: stuck on
   :: when(c_off >= x_off) invariant(c_off <= x_off) break {= fail_p2 = 2 =} // failure: stuck off
   }
}

process Valve()
{
   clock c_on; real x_on;
   clock c_off; real x_off;

   invariant(false) init {= x_on = Exp(on_v ? V_FAIL_ON_ON : V_FAIL_OFF_ON), x_off = Exp(on_v ? V_FAIL_ON_OFF : V_FAIL_OFF_OFF) =};
   do {
   :: switch? {= c_on = 0, x_on = Exp(on_v ? V_FAIL_ON_ON : V_FAIL_OFF_ON), c_off = 0, x_off = Exp(on_v ? V_FAIL_ON_OFF : V_FAIL_OFF_OFF) =}
   :: when(c_on >= x_on) invariant(c_on <= x_on) break {= fail_v = 1 =} // failure: stuck on
   :: when(c_off >= x_off) invariant(c_off <= x_off) break {= fail_v = 2 =} // failure: stuck off
   }
}

process Controller()
{
   process Normal()
   {
      alt {
      :: invariant(level <= HLB) when(level >= HLB) switch! palt {
         :1-C_FAIL: {= on_p1 = false, on_p2 = false, on_v = true =}
         :  C_FAIL: {==}
         }; High()
      :: invariant(level >= HLA) when(level <= HLA) switch! palt {
         :1-C_FAIL: {= on_p1 = true, on_p2 = true, on_v = false =}
         :  C_FAIL: {==}
         }; Low()
      }
   }
   
   process High()
   {
      invariant(level >= HLA) when(level <= HLA) switch! palt {
      :1-C_FAIL: {= on_p1 = true, on_p2 = true, on_v = false =}
      :  C_FAIL: {==}
      }; Low()
   }
   
   process Low()
   {
      invariant(level <= HLB) when(level >= HLB) switch! palt {
      :1-C_FAIL: {= on_p1 = false, on_p2 = false, on_v = true =}
      :  C_FAIL: {==}
      }; High()
   }
   
   Normal()
}

process Observer()
{
   par {
   :: invariant(level <= HLP) when(level >= HLP) {= overflow = true =}
   :: invariant(level >= HLV) when(level <= HLV) {= dryout = true =}
   }
}

restrict { switch? }
{
   par {
   :: Pump1()
   :: Pump2()
   :: Valve()
   :: Controller()
   :: Observer()
   }
}
